{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport noteService from './noteService';\nconst initialState = {\n  notes: [],\n  isError: false,\n  isLoading: false,\n  message: ''\n};\n\n// Get Ticket notes\nexport const getNotes = createAsyncThunk('notes/getAll', async (ticketId, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await noteService.getNotes(ticketId, token);\n    // const data = await authService.register(user)\n    // console.log('from slice',data)\n  } catch (err) {\n    console.log(err);\n    const message = err.response && err.response.data && err.response.data.message || err.message || err.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n// create a ticket note\nexport const createNote = createAsyncThunk('notes/create', async ({\n  noteText,\n  ticketId\n}, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await noteService.createNote(noteText, ticketId, token);\n    // const data = await authService.register(user)\n    // console.log('from slice',data)\n  } catch (err) {\n    console.log(err);\n    const message = err.response && err.response.data && err.response.data.message || err.message || err.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const noteSlice = createSlice({\n  name: 'note',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(getNotes.pending, state => {\n      state.isLoading = true;\n    }).addCase(getNotes.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.notes = action.payload;\n    }).addCase(getNotes.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(createNote.pending, state => {\n      state.isLoading = true;\n    }).addCase(createNote.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.notes.push(action.payload);\n    }).addCase(createNote.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = noteSlice.actions;\nexport default noteSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","noteService","initialState","notes","isError","isLoading","message","getNotes","ticketId","thunkAPI","token","getState","auth","user","err","console","log","response","data","toString","rejectWithValue","createNote","noteText","noteSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","isSuccess","payload","rejected","push","actions","reducer"],"sources":["C:/Users/benmo/Downloads/SupportTicketManagementSystem/frontend/src/features/notes/noteSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport noteService from './noteService'\n\nconst initialState = {\n  notes: [],\n  isError: false,\n  isLoading: false,\n  message: '',\n}\n\n// Get Ticket notes\nexport const getNotes = createAsyncThunk(\n  'notes/getAll',\n  async (ticketId, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().auth.user.token\n      return await noteService.getNotes(ticketId, token)\n      // const data = await authService.register(user)\n      // console.log('from slice',data)\n    } catch (err) {\n      console.log(err)\n      const message =\n        (err.response && err.response.data && err.response.data.message) ||\n        err.message ||\n        err.toString()\n      return thunkAPI.rejectWithValue(message)\n    }\n  }\n)\n// create a ticket note\nexport const createNote = createAsyncThunk(\n  'notes/create',\n  async ({ noteText, ticketId }, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().auth.user.token\n      return await noteService.createNote(noteText, ticketId, token)\n      // const data = await authService.register(user)\n      // console.log('from slice',data)\n    } catch (err) {\n      console.log(err)\n      const message =\n        (err.response && err.response.data && err.response.data.message) ||\n        err.message ||\n        err.toString()\n      return thunkAPI.rejectWithValue(message)\n    }\n  }\n)\n\nexport const noteSlice = createSlice({\n  name: 'note',\n  initialState,\n  reducers: {\n    reset: (state) => initialState,\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getNotes.pending, (state) => {\n        state.isLoading = true\n      })\n      .addCase(getNotes.fulfilled, (state, action) => {\n        state.isLoading = false\n        state.isSuccess = true\n        state.notes = action.payload\n      })\n      .addCase(getNotes.rejected, (state, action) => {\n        state.isLoading = false\n        state.isError = true\n        state.message = action.payload\n      })\n      .addCase(createNote.pending, (state) => {\n        state.isLoading = true\n      })\n      .addCase(createNote.fulfilled, (state, action) => {\n        state.isLoading = false\n        state.isSuccess = true\n        state.notes.push(action.payload)\n      })\n      .addCase(createNote.rejected, (state, action) => {\n        state.isLoading = false\n        state.isError = true\n        state.message = action.payload\n      })\n  },\n})\n\nexport const { reset } = noteSlice.actions\nexport default noteSlice.reducer\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}