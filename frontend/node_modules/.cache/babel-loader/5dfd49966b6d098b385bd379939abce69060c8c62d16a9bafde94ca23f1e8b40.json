{"ast":null,"code":"import axios from 'axios';\nconst API_URL = '/auth/';\n\n// Register user\nconst register = async userData => {\n  const response = await axios.post(API_URL + 'register', userData);\n  console.log('from register', response);\n  return response.data;\n};\n\n// Login user\nconst login = async userData => {\n  const response = await axios.post(API_URL + 'login', userData);\n  console.log('from register', response);\n  if (response.data) {\n    localStorage.setItem('user', JSON.stringify(response.data));\n  }\n  return response.data;\n};\n\n// Logout user\nconst logout = () => localStorage.removeItem('user');\n\n// Get users\nconst getUsers = async () => {\n  const response = await axios.get(\"/users/all\");\n  return response.data;\n};\n\n// Delete user\nconst deleteUser = async userId => {\n  const response = await axios.delete(`/users/id/${userId}`);\n  return response.data;\n};\n\n// Verify email\nconst VerifyEmail = async userId => {\n  console.log(userId);\n  const response = await axios.get(`/auth/verify/${userId}`);\n  return response.data;\n};\n\n// Reset password\n_c = VerifyEmail;\nconst resetPassword = async email => {\n  const response = await axios.post(API_URL + 'resetPassword', {\n    email\n  });\n  return response.data;\n};\n\n// Confirm reset password\nconst resetPasswordConfirm = async (token, password) => {\n  const response = await axios.put(API_URL + `resetPassword/${token}`, {\n    password\n  });\n  return response.data;\n};\nconst authService = {\n  register,\n  logout,\n  login,\n  getUsers,\n  deleteUser,\n  VerifyEmail,\n  // Add verifyEmail to authService\n  resetPassword,\n  // Add resetPassword to authService\n  resetPasswordConfirm // Add resetPasswordConfirm to authService\n};\nexport default authService;\nexport { VerifyEmail, resetPassword, resetPasswordConfirm };\nvar _c;\n$RefreshReg$(_c, \"VerifyEmail\");","map":{"version":3,"names":["axios","API_URL","register","userData","response","post","console","log","data","login","localStorage","setItem","JSON","stringify","logout","removeItem","getUsers","get","deleteUser","userId","delete","VerifyEmail","_c","resetPassword","email","resetPasswordConfirm","token","password","put","authService","$RefreshReg$"],"sources":["C:/Users/benmo/Downloads/SupportTicketManagementSystem/frontend/src/features/auth/authService.js"],"sourcesContent":["import axios from 'axios'\nconst API_URL = '/auth/'\n\n// Register user\nconst register = async (userData) => {\n  const response = await axios.post(API_URL+ 'register', userData)\n  console.log('from register', response)\n  return response.data\n}\n\n// Login user\nconst login = async (userData) => {\n  const response = await axios.post(API_URL + 'login', userData)\n  console.log('from register', response)\n  if (response.data) {\n    localStorage.setItem('user', JSON.stringify(response.data))\n  }\n  return response.data\n}\n\n// Logout user\nconst logout = () => localStorage.removeItem('user')\n\n// Get users\nconst getUsers = async () => {\n  const response = await axios.get(\"/users/all\")\n  return response.data\n}\n\n// Delete user\nconst deleteUser = async (userId) => {\n  const response = await axios.delete(`/users/id/${userId}`)\n  return response.data\n}\n\n// Verify email\nconst VerifyEmail = async (userId) => {\n  console.log(userId)\n  const response = await axios.get(`/auth/verify/${userId}`)\n  return response.data\n}\n\n// Reset password\nconst resetPassword = async (email) => {\n  const response = await axios.post(API_URL + 'resetPassword', { email });\n  return response.data;\n};\n\n// Confirm reset password\nconst resetPasswordConfirm = async (token, password) => {\n  const response = await axios.put(API_URL + `resetPassword/${token}`, { password });\n  return response.data;\n};\n\nconst authService = {\n  register,\n  logout,\n  login,\n  getUsers,\n  deleteUser,\n  VerifyEmail, // Add verifyEmail to authService\n  resetPassword, // Add resetPassword to authService\n  resetPasswordConfirm, // Add resetPasswordConfirm to authService\n}\n\nexport default authService\nexport { VerifyEmail, resetPassword, resetPasswordConfirm }\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,OAAO,GAAG,QAAQ;;AAExB;AACA,MAAMC,QAAQ,GAAG,MAAOC,QAAQ,IAAK;EACnC,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAACJ,OAAO,GAAE,UAAU,EAAEE,QAAQ,CAAC;EAChEG,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,QAAQ,CAAC;EACtC,OAAOA,QAAQ,CAACI,IAAI;AACtB,CAAC;;AAED;AACA,MAAMC,KAAK,GAAG,MAAON,QAAQ,IAAK;EAChC,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAACJ,OAAO,GAAG,OAAO,EAAEE,QAAQ,CAAC;EAC9DG,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,QAAQ,CAAC;EACtC,IAAIA,QAAQ,CAACI,IAAI,EAAE;IACjBE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC7D;EACA,OAAOJ,QAAQ,CAACI,IAAI;AACtB,CAAC;;AAED;AACA,MAAMM,MAAM,GAAGA,CAAA,KAAMJ,YAAY,CAACK,UAAU,CAAC,MAAM,CAAC;;AAEpD;AACA,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAC3B,MAAMZ,QAAQ,GAAG,MAAMJ,KAAK,CAACiB,GAAG,CAAC,YAAY,CAAC;EAC9C,OAAOb,QAAQ,CAACI,IAAI;AACtB,CAAC;;AAED;AACA,MAAMU,UAAU,GAAG,MAAOC,MAAM,IAAK;EACnC,MAAMf,QAAQ,GAAG,MAAMJ,KAAK,CAACoB,MAAM,CAAC,aAAaD,MAAM,EAAE,CAAC;EAC1D,OAAOf,QAAQ,CAACI,IAAI;AACtB,CAAC;;AAED;AACA,MAAMa,WAAW,GAAG,MAAOF,MAAM,IAAK;EACpCb,OAAO,CAACC,GAAG,CAACY,MAAM,CAAC;EACnB,MAAMf,QAAQ,GAAG,MAAMJ,KAAK,CAACiB,GAAG,CAAC,gBAAgBE,MAAM,EAAE,CAAC;EAC1D,OAAOf,QAAQ,CAACI,IAAI;AACtB,CAAC;;AAED;AAAAc,EAAA,GANMD,WAAW;AAOjB,MAAME,aAAa,GAAG,MAAOC,KAAK,IAAK;EACrC,MAAMpB,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAACJ,OAAO,GAAG,eAAe,EAAE;IAAEuB;EAAM,CAAC,CAAC;EACvE,OAAOpB,QAAQ,CAACI,IAAI;AACtB,CAAC;;AAED;AACA,MAAMiB,oBAAoB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACtD,MAAMvB,QAAQ,GAAG,MAAMJ,KAAK,CAAC4B,GAAG,CAAC3B,OAAO,GAAG,iBAAiByB,KAAK,EAAE,EAAE;IAAEC;EAAS,CAAC,CAAC;EAClF,OAAOvB,QAAQ,CAACI,IAAI;AACtB,CAAC;AAED,MAAMqB,WAAW,GAAG;EAClB3B,QAAQ;EACRY,MAAM;EACNL,KAAK;EACLO,QAAQ;EACRE,UAAU;EACVG,WAAW;EAAE;EACbE,aAAa;EAAE;EACfE,oBAAoB,CAAE;AACxB,CAAC;AAED,eAAeI,WAAW;AAC1B,SAASR,WAAW,EAAEE,aAAa,EAAEE,oBAAoB;AAAE,IAAAH,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}