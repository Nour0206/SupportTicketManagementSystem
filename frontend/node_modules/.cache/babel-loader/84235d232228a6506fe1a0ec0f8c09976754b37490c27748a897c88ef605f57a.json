{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\benmo\\\\Downloads\\\\SupportTicketManagementSystem\\\\frontend\\\\src\\\\pages\\\\AssignedTickets.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { BackButton } from '../components/BackButton';\nimport Spinner from '../components/Spinner';\nimport TicketItem from '../components/TicketItem';\nimport { getAgentTickets, reset } from '../features/tickets/ticketSlice';\n\n// Helper function to get the status text from the status number\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Tickets() {\n  _s();\n  const {\n    tickets,\n    isLoading,\n    isSuccess\n  } = useSelector(state => state.tickets);\n  const {\n    user\n  } = useSelector(state => state.auth);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  useEffect(() => {\n    return () => {\n      if (isSuccess) {\n        dispatch(reset());\n      }\n    };\n  }, [dispatch, isSuccess]);\n  useEffect(() => {\n    dispatch(getAgentTickets());\n  }, [dispatch]);\n  const handleAssignTicket = ticketId => {\n    navigate(`/assign-ticket/${ticketId}`);\n  };\n  const getStatusText = status => {\n    // Implement your logic to get status text from status number\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(BackButton, {\n      url: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My Assigned Tickets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tickets\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ticket-headings\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Ticket Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Action\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), tickets.length > 0 ? tickets.map(ticket => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ticket-item\",\n        children: [/*#__PURE__*/_jsxDEV(TicketItem, {\n          ticket: ticket\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this), user.role === 'admin' ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAssignTicket(ticket._id),\n          children: \"Assign Ticket\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: getStatusText(ticket.status)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this)]\n      }, ticket._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No tickets found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Tickets, \"lZ+9ScamzcoEV6GCrsxS5z4PDHg=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useNavigate];\n});\n_c = Tickets;\nexport default Tickets;\nvar _c;\n$RefreshReg$(_c, \"Tickets\");","map":{"version":3,"names":["useEffect","useDispatch","useSelector","useNavigate","BackButton","Spinner","TicketItem","getAgentTickets","reset","jsxDEV","_jsxDEV","Fragment","_Fragment","Tickets","_s","tickets","isLoading","isSuccess","state","user","auth","dispatch","navigate","handleAssignTicket","ticketId","getStatusText","status","fileName","_jsxFileName","lineNumber","columnNumber","children","url","className","length","map","ticket","role","onClick","_id","_c","$RefreshReg$"],"sources":["C:/Users/benmo/Downloads/SupportTicketManagementSystem/frontend/src/pages/AssignedTickets.jsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { BackButton } from '../components/BackButton';\nimport Spinner from '../components/Spinner';\nimport TicketItem from '../components/TicketItem';\nimport { getAgentTickets, reset } from '../features/tickets/ticketSlice';\n\n// Helper function to get the status text from the status number\nfunction Tickets() {\n  const { tickets, isLoading, isSuccess } = useSelector(\n    (state) => state.tickets\n  )\n  const { user } = useSelector((state) => state.auth)\n  const dispatch = useDispatch()\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    return () => {\n      if (isSuccess) {\n        dispatch(reset())\n      }\n    }\n  }, [dispatch, isSuccess])\n\n  useEffect(() => {\n    dispatch(getAgentTickets())\n  }, [dispatch])\n\n  const handleAssignTicket = (ticketId) => {\n    navigate(`/assign-ticket/${ticketId}`);\n  };\n\n  const getStatusText = (status) => {\n    // Implement your logic to get status text from status number\n  };\n\n  if (isLoading) {\n    return <Spinner />\n  }\n\n  return (\n    <>\n      <BackButton url=\"/\" />\n      <h1>My Assigned Tickets</h1>\n      <div className=\"tickets\">\n        <div className=\"ticket-headings\">\n          <div>Date</div>\n          <div>Ticket Name</div>\n          <div>Status</div>\n          <div>Action</div>\n        </div>\n        {tickets.length > 0 ? (\n          tickets.map((ticket) => (\n            <div key={ticket._id} className=\"ticket-item\">\n              <TicketItem ticket={ticket} />\n              {user.role === 'admin' ? (\n                <button onClick={() => handleAssignTicket(ticket._id)}>Assign Ticket</button>\n              ) : (\n                <div>{getStatusText(ticket.status)}</div>\n              )}\n            </div>\n          ))\n        ) : (\n          <p>No tickets found</p>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default Tickets;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}